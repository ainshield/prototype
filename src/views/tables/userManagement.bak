// ** React Imports
import { useState, ChangeEvent } from 'react'

// ** MUI Imports
import Paper from '@mui/material/Paper'
import Table from '@mui/material/Table'
import TableRow from '@mui/material/TableRow'
import TableHead from '@mui/material/TableHead'
import TableBody from '@mui/material/TableBody'
import TableCell from '@mui/material/TableCell'
import TableContainer from '@mui/material/TableContainer'
import TablePagination from '@mui/material/TablePagination'
import Collapse from '@mui/material/Collapse'

//**Icons Imports
import ChevronUp from 'mdi-material-ui/ChevronUp'
import ChevronDown from 'mdi-material-ui/ChevronDown'

interface Column {
  id:
    | 'id'
    | 'programid'
    | 'roleid'
    | 'permissionid'
    | 'username'
    | 'password'
    | 'firstname'
    | 'middlename'
    | 'lastname'
    | 'contactnumber'
    | 'mobilenumber'
    | 'email'
    | 'position'
    | 'notes'
  label: string
  minWidth?: number
  align?: 'right'
  format?: (value: number) => string
}

const columns: readonly Column[] = [
  { id: 'id', label: 'ID' },
  { id: 'programid', label: 'Program\u00a0ID' },
  { id: 'roleid', label: 'Role\u00a0ID' },
  { id: 'permissionid', label: 'Permission\u00a0ID' },
  { id: 'username', label: 'Username' },
  { id: 'password', label: 'Password' },
  { id: 'firstname', label: 'Firstname' },
  { id: 'middlename', label: 'Middlename' },
  { id: 'lastname', label: 'Lastname' },
  { id: 'contactnumber', label: 'Contact Number' },
  { id: 'mobilenumber', label: 'Mobile Number' },
  { id: 'email', label: 'Email' },
  { id: 'position', label: 'Position' },
  { id: 'notes', label: 'Notes' }
]

// interface Data {
//   id: number
//   programid: number
//   roleid: number
//   permissionid: number
//   username: string
//   password: string
//   firstname: string
//   middlename: string
//   lastname: string,
//   contactnumber: number
//   mobilenumber: string
//   email: string,
//   position: string
//   notes: string
// }

const createData = (
  id: number,
  programid: number,
  roleid: number,
  permissionid: number,
  username: string,
  password: string,
  firstname: string,
  middlename: string,
  lastname: string,
  contactnumber: number,
  mobilenumber: string,
  email: string,
  position: string,
  notes: string
) => {
  return {
    id,
    programid,
    roleid,
    permissionid,
    username,
    password,
    firstname,
    middlename,
    lastname,
    contactnumber,
    mobilenumber,
    email,
    position,
    notes
  }
}

const rows = [
  createData(
    1,
    13662724,
    215161,
    6246136,
    'johndoe',
    'foobar1234',
    'John',
    ' ',
    'Doe',
    0,
    '09123456789',
    'johndoe@example.com',
    'employee',
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'
  ),
  createData(
    2,
    13662724,
    215161,
    6246136,
    'johndoe',
    'foobar1234',
    'John',
    ' ',
    'Doe',
    0,
    '09123456789',
    'johndoe@example.com',
    'employee',
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'
  ),
  createData(
    3,
    13662724,
    215161,
    6246136,
    'johndoe',
    'foobar1234',
    'John',
    ' ',
    'Doe',
    0,
    '09123456789',
    'johndoe@example.com',
    'employee',
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'
  )
]
const UserManagement = () => {
  // ** States
  const [page, setPage] = useState<number>(0)
  const [rowsPerPage, setRowsPerPage] = useState<number>(10)

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage)
  }

  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(+event.target.value)
    setPage(0)
  }

  return (
    <Paper sx={{ width: '100%', overflow: 'hidden' }}>
      <TableContainer sx={{ maxHeight: 440 }}>
        <Table stickyHeader aria-label='sticky table'>
          <TableHead>
            <TableRow>
              {columns.map(column => (
                <TableCell key={column.id} align={column.align} sx={{ minWidth: column.minWidth }}>
                  {column.label}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {
              return (
                <TableRow hover role='checkbox' tabIndex={-1} key={row.id}>
                  {columns.map(column => {
                    const value = row[column.id]

                    return (
                      <TableCell key={column.id} align={column.align}>
                        {column.format && typeof value === 'number' ? column.format(value) : value}
                      </TableCell>
                    )
                  })}
                </TableRow>
              )
            })}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[10, 25, 100]}
        component='div'
        count={rows.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  )
}

export default UserManagement
